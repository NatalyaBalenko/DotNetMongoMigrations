Some may ask why do we need migrations in Mongo, and lots of developers will scream, no you don't but here's the reality:

1. We no longer need create schema migrations, as this is a schemaless database, when we add collections (tables) or properties on our entities (columns), we don't need to run creation scripts.

However:
1. When we rename a property or a collection, we need a migration.
2. If we want to manipulate data, we need a migration.
- Moving data between types
- Setting default values for new properties
3. We might want to manage our indexes in a reproducible fashion
4. If we drop columns or collections, sure we can leave them, but that's like leaving orphaned data.  We didn't "need" these migrations before and we don't "need" them now, but what sane developer wants to leave old fields behind to confuse other people, including possibly himself/herself, in the future?

So the idea here is have a simple migration script that just executes commands against Mongo, do whatever you want.  

Just a note, this will create a collection in your database called DatabaseVersion that holds the migration version numbers, this is customizable.

Getting started
1. Extend the MigrationRunner and couple it to a session per each database that you have.  In the constructor, make a call to the assembly with migrations so it knows where to scan for migrations.
2. Hook the MigrationRunner up to application startup.
3. Write migrations by extending the Migration class.  Set a meaningful MigrationVersion to order the migrations.  Have it do whatever to the Mongo session however I'd avoid coupling to your object models as changing them will break old migrations and is the point of why we are writing migrations in the first place.  Stick to editing bson documents or running server side mongo commands.
4. Test your migrations, the migration class is independent and can be run on fake data, even the Collection Migration can be tested.